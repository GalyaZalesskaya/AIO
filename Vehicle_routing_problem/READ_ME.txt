Начальное решение теперь выбирается жадным алгоритмом, путем сортировки вершин по времени открытия, что делает решение независимым от порядка кастомера в списке, что хорошо. Уже на этом этапе получается хорошее решение.
Функция добавления кастомера в любое место в маршруте тоже существует (locate_customer), и она используется, если какие-то вершины остались без проходящего через него пути. В таком случае, они добавляются в любой подходящий путь.

Local Search состоит из 4 функций:
2-opt,
move&locate (меняющий местами вершины в рамках одного пути),
swap 1-1 (меняющий местами 2 вершины в разных путях),
cross (который берет начало одного пути и конец другого).

Perturbation перемешивает треть кастомеров из середины внутри одного пути. Несмотря на то что, казалось бы, эта операция обратна move&locate, он все равно помогает выпрыгнуть из локального минимума.

В ходе написания кода я столкнулась с тем, что свобода обращения с переменными в Питон имеет обратную сторону. Сложно предугадать, когда ты путем присваивания получаешь ссылку на объект, а когда - его копию. Всязи с этим возникало множество ошибок, которые исправлялись путем добавления copy.deepcopy() куда надо и не надо.

А чтобы написать GLS мне пришлось переделывать свою структуру, что предсказумо привело к фатальным ошибкам. Тем не менее, я прикладываю его код отдельно, чтобы показать, что я не опустила руки после написания только ILS.

В файле VRP_total.txt хранятся лучшие результаты для тестов, которые мне хватило терпения досчитать с помощью ILS.
